# -*- coding: utf-8 -*-
"""lda_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1phtlMNH0Tywt4y2VAzuW7RFafsQ0pDw3
"""

# Commented out IPython magic to ensure Python compatibility.
# Load and install some library
!pip install pyLDAvis
import re
import numpy as np
import pandas as pd
from pprint import pprint

# Gensim
import gensim
import gensim.corpora as corpora
from gensim.utils import simple_preprocess
from gensim.models import CoherenceModel

# spacy for lemmatization
import spacy

# Plotting tools
import pyLDAvis
import pyLDAvis.gensim  # don't skip this
import matplotlib.pyplot as plt
# %matplotlib inline

# Enable logging for gensim - optional
import logging
logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.ERROR)

import warnings
warnings.filterwarnings("ignore",category=DeprecationWarning)

# NLTK Stop words
import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')

# Create helper function
def preprocess_text_topic(data, stopw):
  # Tokenizer
  def tokenizer_word(sentences):
    for line in sentences:
      yield(gensim.utils.simple_preprocess(str(line), deacc=True))
  
  result = list(tokenizer_word(data))
  
  # Remove stopwords for topic modeling
  def remove_words(texts):
    return [[word for word in simple_preprocess(str(doc)) if word not in stopw] for doc in texts]
  
  result = remove_words(result)

  # Create bigram
  bigram = gensim.models.Phrases(result, min_count=5, threshold=100)
  bigram_mod = gensim.models.phrases.Phraser(bigram)

  def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]
  
  result = make_bigrams(result)

  # Create lemmatization
  nlp = spacy.load('en', disable=['parser', 'ner'])
  def lemmatization(texts, allowed_postag=["NOUN", "ADJ", "VERB", "ADV"]):
    """https://spacy.io/api/annotation"""
    outcome = []
    for sent in texts:
      doc = nlp(" ".join(sent))
      outcome.append([token.lemma_ for token in doc if token.pos_ in allowed_postag])
    return outcome
  
  result = lemmatization(result, allowed_postag=["NOUN", "ADJ", "VERB", "ADV"])
  return result

# Import dataset
data_text = pd.read_csv('abstract_clean.csv')
data_list = list(data_text.abstract)

# Import stopwords
stop_words = stopwords.words('english')
stop_words.extend(['from', 'subject', 're', 'edu', 'use'])

# Preprocess
data_lemmatized = preprocess_text_topic(data_list, stop_words)

# Create dictionary
id2word = corpora.Dictionary(data_lemmatized)

# Create corpus
texts = data_lemmatized

# Term document frequency
corpus = [id2word.doc2bow(text) for text in texts]

# Build LDA model
def build_topic(corpus, id2word, num_topics, data_lemmatized):
  lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=num_topics, 
                                           random_state=100,
                                           update_every=1,
                                           chunksize=100,
                                           passes=10,
                                           alpha='auto',
                                           per_word_topics=True)
  coherence_model_lda = CoherenceModel(model=lda_model, texts=data_lemmatized, dictionary=id2word, coherence='c_v')
  coherence_lda = coherence_model_lda.get_coherence()
  return (lda_model, coherence_lda)

result_lda, result_coherence = build_topic(corpus, id2word, num_topics=10, data_lemmatized=data_lemmatized)

# Print the Keyword in the 10 topics
#pprint(result_lda.print_topics())
doc_lda = result_lda[corpus]

# Find best K
def find_best_k(K, corpus, id2word, text, start=2, step=1):
  coherence_value = []
  model_list = []
  for i in range(start, K+1, step):
    lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                                id2word=id2word,
                                                num_topics=i, 
                                                random_state=100,
                                                update_every=1,
                                                chunksize=100,
                                                passes=10,
                                                alpha='auto',
                                                per_word_topics=True)
    coherence_model_lda = CoherenceModel(model=lda_model, texts=text, dictionary=id2word, coherence='c_v')
    coherence_lda = coherence_model_lda.get_coherence()
    coherence_value.append(coherence_lda)
    model_list.append(lda_model)
  return (model_list, coherence_value)

K = 20
model_list, coherence_value = find_best_k(K, corpus, id2word, data_lemmatized)
limit=K; start=2; step=1;
x = range(start, limit+1, step)
plt.figure(figsize=(20,10))
plt.plot(x, coherence_value)
plt.xlabel("Number of topics")
plt.xticks(np.arange(min(x), max(x)+1, 2))
plt.ylabel("Coherence score")
plt.vlines(x = [np.arange(2, K+1, 1)], ymin = 0.3, ymax = max(coherence_value), colors = 'grey', linestyle = '--')
plt.show()



# Select the model and print the topics
m = coherence_value.index(max(coherence_value))
optimal_model = model_list[m]
model_topics = optimal_model.show_topics(formatted=False)
pprint(optimal_model.print_topics(num_words=5))

def format_topics_sentences(ldamodel, corpus, texts):
    # Init output
    sent_topics_df = pd.DataFrame()

    # Get main topic in each document
    n = 0
    for i in enumerate(ldamodel[corpus]):
      line = sorted(ldamodel[corpus[n]][0], key=lambda x: (x[1]), reverse=True)
      n = n+1
      # Get the Dominant topic, Perc Contribution and Keywords for each document
      for j, (topic_num, prop_topic) in enumerate(line):
        if j == 0:  # => dominant topic
          wp = ldamodel.show_topic(topic_num)
          topic_keywords = ", ".join([word for word, prop in wp])
          sent_topics_df = sent_topics_df.append(pd.Series([int(topic_num), round(prop_topic,4), topic_keywords]), ignore_index=True)
        else:
          break
    sent_topics_df.columns = ['Dominant_Topic', 'Perc_Contribution', 'Topic_Keywords']

    # Add original text to the end of the output
    contents = pd.Series(texts)
    sent_topics_df = pd.concat([sent_topics_df, contents], axis=1)
    return(sent_topics_df)

df_topic_sents_keywords = format_topics_sentences(ldamodel=optimal_model, corpus=corpus, texts=data_text['abstract'])

# Format
df_dominant_topic = df_topic_sents_keywords.reset_index()
df_dominant_topic.columns = ['Document_No', 'Dominant_Topic', 'Topic_Perc_Contrib', 'Keywords', 'Text']

# Show
df_dominant_topic.head(10)

pyLDAvis.enable_notebook()
vis = pyLDAvis.gensim.prepare(optimal_model, corpus, id2word)
vis

# Print the Keyword in the 10 topics
pprint(optimal_model.print_topics())
doc_lda = result_lda[corpus]

